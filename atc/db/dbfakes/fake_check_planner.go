// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"
	"time"

	"github.com/concourse/concourse/atc"
	"github.com/concourse/concourse/atc/db"
)

type FakeCheckPlanner struct {
	CreateStub        func(db.Checkable, atc.VersionedResourceTypes, atc.Version, atc.Source, time.Duration) atc.Plan
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 db.Checkable
		arg2 atc.VersionedResourceTypes
		arg3 atc.Version
		arg4 atc.Source
		arg5 time.Duration
	}
	createReturns struct {
		result1 atc.Plan
	}
	createReturnsOnCall map[int]struct {
		result1 atc.Plan
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCheckPlanner) Create(arg1 db.Checkable, arg2 atc.VersionedResourceTypes, arg3 atc.Version, arg4 atc.Source, arg5 time.Duration) atc.Plan {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 db.Checkable
		arg2 atc.VersionedResourceTypes
		arg3 atc.Version
		arg4 atc.Source
		arg5 time.Duration
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCheckPlanner) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeCheckPlanner) CreateCalls(stub func(db.Checkable, atc.VersionedResourceTypes, atc.Version, atc.Source, time.Duration) atc.Plan) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeCheckPlanner) CreateArgsForCall(i int) (db.Checkable, atc.VersionedResourceTypes, atc.Version, atc.Source, time.Duration) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCheckPlanner) CreateReturns(result1 atc.Plan) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 atc.Plan
	}{result1}
}

func (fake *FakeCheckPlanner) CreateReturnsOnCall(i int, result1 atc.Plan) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 atc.Plan
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 atc.Plan
	}{result1}
}

func (fake *FakeCheckPlanner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCheckPlanner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.CheckPlanner = new(FakeCheckPlanner)
