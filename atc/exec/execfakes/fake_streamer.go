// Code generated by counterfeiter. DO NOT EDIT.
package execfakes

import (
	"context"
	"io"
	"sync"

	"github.com/concourse/concourse/atc/exec"
	"github.com/concourse/concourse/atc/runtime"
)

type FakeStreamer struct {
	StreamFileStub        func(context.Context, runtime.Artifact, string) (io.ReadCloser, error)
	streamFileMutex       sync.RWMutex
	streamFileArgsForCall []struct {
		arg1 context.Context
		arg2 runtime.Artifact
		arg3 string
	}
	streamFileReturns struct {
		result1 io.ReadCloser
		result2 error
	}
	streamFileReturnsOnCall map[int]struct {
		result1 io.ReadCloser
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStreamer) StreamFile(arg1 context.Context, arg2 runtime.Artifact, arg3 string) (io.ReadCloser, error) {
	fake.streamFileMutex.Lock()
	ret, specificReturn := fake.streamFileReturnsOnCall[len(fake.streamFileArgsForCall)]
	fake.streamFileArgsForCall = append(fake.streamFileArgsForCall, struct {
		arg1 context.Context
		arg2 runtime.Artifact
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.StreamFileStub
	fakeReturns := fake.streamFileReturns
	fake.recordInvocation("StreamFile", []interface{}{arg1, arg2, arg3})
	fake.streamFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStreamer) StreamFileCallCount() int {
	fake.streamFileMutex.RLock()
	defer fake.streamFileMutex.RUnlock()
	return len(fake.streamFileArgsForCall)
}

func (fake *FakeStreamer) StreamFileCalls(stub func(context.Context, runtime.Artifact, string) (io.ReadCloser, error)) {
	fake.streamFileMutex.Lock()
	defer fake.streamFileMutex.Unlock()
	fake.StreamFileStub = stub
}

func (fake *FakeStreamer) StreamFileArgsForCall(i int) (context.Context, runtime.Artifact, string) {
	fake.streamFileMutex.RLock()
	defer fake.streamFileMutex.RUnlock()
	argsForCall := fake.streamFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeStreamer) StreamFileReturns(result1 io.ReadCloser, result2 error) {
	fake.streamFileMutex.Lock()
	defer fake.streamFileMutex.Unlock()
	fake.StreamFileStub = nil
	fake.streamFileReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeStreamer) StreamFileReturnsOnCall(i int, result1 io.ReadCloser, result2 error) {
	fake.streamFileMutex.Lock()
	defer fake.streamFileMutex.Unlock()
	fake.StreamFileStub = nil
	if fake.streamFileReturnsOnCall == nil {
		fake.streamFileReturnsOnCall = make(map[int]struct {
			result1 io.ReadCloser
			result2 error
		})
	}
	fake.streamFileReturnsOnCall[i] = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeStreamer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.streamFileMutex.RLock()
	defer fake.streamFileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStreamer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ exec.Streamer = new(FakeStreamer)
